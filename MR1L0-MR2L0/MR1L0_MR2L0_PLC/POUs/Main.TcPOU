<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4022.12">
  <POU Name="Main" Id="{371c560d-bfd7-44d3-85a8-59ca1fa1938a}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM Main
VAR
	// Axes for each system
	// M1L0
	{attribute 'TcLinkTo' := '.fbRunHOMS.bSTOEnable1:=TIIB[Term 17 (EL1004) - STO]^Channel 1^Input;
                              .fbRunHOMS.bSTOEnable2:=TIIB[Term 17 (EL1004) - STO]^Channel 2^Input;
	                          .fbRunHOMS.stYupEnc.Count:=TIIB[Term 15 (EL5042) - Yupdwn]^FB Inputs Channel 1^Position;
	                          .fbRunHOMS.stYdwnEnc.Count:=TIIB[Term 15 (EL5042) - Yupdwn]^FB Inputs Channel 2^Position;
	                          .fbRunHOMS.stXupEnc.Count:=TIIB[Term 14 (EL5042) - Xupdwn]^FB Inputs Channel 1^Position;
	                          .fbRunHOMS.stXdwnEnc.Count:=TIIB[Term 14 (EL5042) - Xupdwn]^FB Inputs Channel 2^Position'}
	{attribute 'pytmc' := '
		pv: MR1L0:LFE
	'}
	M1L0 : DUT_HOMS;

	// Basic Stats for RMS watch:
	fbDataM1L0ActPos : FB_LREALBuffer; // ActPos Data Acquisition FB
	fbDataM1L0SetPos : FB_LREALBuffer; // SetPos Data Acquisition FB
	bExecuteDataStorageM1L0 : BOOL := TRUE; // Take data of both ActPos and SetPos
	bNewPitchEncArray : BOOL;

	fbStatsM1L0 : FB_BasicStats; // Calculate mean/standard deviation of ActPos
	fEncMeanM1L0 : LREAL;
	fEncStDevM1L0 : LREAL;

	// RMS Error
	fMaxM1L0PitchRMSError : LREAL := 0;
	fMinM1L0PitchRMSError : LREAL := 10;
	fCurrM1L0PitchRMSError : LREAL := 0;
	nIndex : DINT;
	fSum : LREAL := 0;
	fDiff : LREAL := 0;

	{attribute 'pytmc' := '
		pv: MR1L0:LFE:MMS:PITCH:ACTPOSARRAY
		io: i
    '}
	aEncM1L0PitchActPos : ARRAY [1..1000] OF LREAL;
	{attribute 'pytmc' := '
		pv: MR1L0:LFE:MMS:PITCH:SETPOSARRAY
		io: i
	'}
	aEncM1L0PitchSetPos : ARRAY [1..1000] OF LREAL;

	// Pitch Control
	stM1L0PitchControl : FB_PitchControl;

	// Expert mode permits direct access to individual acutators.
	ExpertMode	:	BOOL := FALSE;
	PitchManualMode: BOOL := FALSE;
(*
	// M2L0
	{attribute 'TcLinkTo' := '.bLimitForwardEnable:=TIIB[Term 22 (EL7041-1000) - Yup]^STM Status^Status^Digital input 1;
                              .bLimitBackwardEnable:=TIIB[Term 22 (EL7041-1000) - Yup]^STM Status^Status^Digital input 2'}
	{attribute 'pytmc' := '
		pv: MR2L0:LFE:MMS:YUP
	'}
	M7 : DUT_MotionStage:=(nCommand:=ENUM_EpicsMotorCmd.EPICS_MOTOR_MOVE_ABS); // Yup
	fbMotionStage_m7 : FB_MotionStage;

	{attribute 'TcLinkTo' := '.bLimitForwardEnable:=TIIB[Term 23 (EL7041-1000) - Ydwn]^STM Status^Status^Digital input 1;
                              .bLimitBackwardEnable:=TIIB[Term 23 (EL7041-1000) - Ydwn]^STM Status^Status^Digital input 2'}
	{attribute 'pytmc' := '
		pv: MR2L0:LFE:MMS:YDWN
	'}
	M8 : DUT_MotionStage:=(nCommand:=ENUM_EpicsMotorCmd.EPICS_MOTOR_MOVE_ABS); // Ydwn
	fbMotionStage_m8 : FB_MotionStage;

	{attribute 'TcLinkTo' := '.bLimitForwardEnable:=TIIB[Term 20 (EL7041-1000) - Xup]^STM Status^Status^Digital input 1;
                              .bLimitBackwardEnable:=TIIB[Term 20 (EL7041-1000) - Xup]^STM Status^Status^Digital input 2'}
	{attribute 'pytmc' := '
		pv: MR2L0:LFE:MMS:XUP
	'}
	M9 : DUT_MotionStage:=(nCommand:=ENUM_EpicsMotorCmd.EPICS_MOTOR_MOVE_ABS); // Xup
	fbMotionStage_m9 : FB_MotionStage;

	{attribute 'TcLinkTo' := '.bLimitForwardEnable:=TIIB[Term 21 (EL7041-1000) - Xdwn]^STM Status^Status^Digital input 1;
                              .bLimitBackwardEnable:=TIIB[Term 21 (EL7041-1000) - Xdwn]^STM Status^Status^Digital input 2'}
	{attribute 'pytmc' := '
		pv: MR2L0:LFE:MMS:XDWN
	'}
	M10 : DUT_MotionStage:=(nCommand:=ENUM_EpicsMotorCmd.EPICS_MOTOR_MOVE_ABS); // Xdwn
	fbMotionStage_m10 : FB_MotionStage;

	{attribute 'TcLinkTo' := '.bLimitForwardEnable:=TIIB[Term 24 (EL7041-1000) - PitchCoarse]^STM Status^Status^Digital input 1;
                              .bLimitBackwardEnable:=TIIB[Term 24 (EL7041-1000) - PitchCoarse]^STM Status^Status^Digital input 2'}
	{attribute 'pytmc' := '
		pv: MR2L0:LFE:MMS:PITCH
	'}
	M11 : DUT_MotionStage:=(nCommand:=ENUM_EpicsMotorCmd.EPICS_MOTOR_MOVE_ABS); // PitchCoarse
	fbMotionStage_m11 : FB_MotionStage;

	{attribute 'TcLinkTo' := '.bLimitForwardEnable:=TIIB[Term 25 (EL7041-1000) - Bender]^STM Status^Status^Digital input 1;
                              .bLimitBackwardEnable:=TIIB[Term 25 (EL7041-1000) - Bender]^STM Status^Status^Digital input 2'}
	{attribute 'pytmc' := '
		pv: MR2L0:LFE:MMS:BENDER
	'}
	M12 : DUT_MotionStage:=(nCommand:=ENUM_EpicsMotorCmd.EPICS_MOTOR_MOVE_ABS); // Bender
	fbMotionStage_m12 : FB_MotionStage;

	{attribute 'TcLinkTo' := '.fbRunHOMS.bSTOEnable1:=TIIB[Term 30 (EL1004) - STO]^Channel 1^Input;
	                          .fbRunHOMS.bSTOEnable2:=TIIB[Term 30 (EL1004) - STO]^Channel 2^Input;
	                          .fbRunHOMS.stYupEnc.Count:=TIIB[Term 28 (EL5042) - Yupdwn]^FB Inputs Channel 1^Position;
	                          .fbRunHOMS.stYdwnEnc.Count:=TIIB[Term 28 (EL5042) - Yupdwn]^FB Inputs Channel 2^Position;
	                          .fbRunHOMS.stXupEnc.Count:=TIIB[Term 27 (EL5042) - Xupdwn]^FB Inputs Channel 1^Position;
	                          .fbRunHOMS.stXdwnEnc.Count:=TIIB[Term 27 (EL5042) - Xupdwn]^FB Inputs Channel 2^Position'}
	{attribute 'pytmc' := '
		pv: MR2L0:LFE
	'}
	M2L0 : DUT_HOMS;
*)
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[// M1L0
M1L0.fbRunHOMS(stYup:=M1,
               stYdwn:=M2,
               stXup:=M3,
               stXdwn:=M4,
               stPitch:=M5,
               stBender:=M6,
	           nYupEncRef:=GVL_M1L0.nYUP_ENC_REF,
               nYdwnEncRef:=GVL_M1L0.nYDWN_ENC_REF,
               nXupEncRef:=GVL_M1L0.nXUP_ENC_REF,
               nXdwnEncRef:=GVL_M1L0.nXDWN_ENC_REF,
			   bExecuteCoupleY:=M1L0.bExecuteCoupleY,
               bExecuteCoupleX:=M1L0.bExecuteCoupleX,
			   bExecuteDecoupleY:=M1L0.bExecuteDecoupleY,
               bExecuteDecoupleX:=M1L0.bExecuteDecoupleX,
               bGantryAlreadyCoupledY=>M1L0.bGantryAlreadyCoupledY,
               bGantryAlreadyCoupledX=>M1L0.bGantryAlreadyCoupledX,
               nCurrGantryY=>M1L0.nCurrGantryY,
               nCurrGantryX=>M1L0.nCurrGantryX);

// Convert nCurrGantry to um (smaller number) to read out in epics
M1L0.nCurrGantryY_um := LINT_TO_REAL(M1L0.nCurrGantryY) / 1000.0;
M1L0.nCurrGantryX_um := LINT_TO_REAL(M1L0.nCurrGantryX) / 1000.0;

fbMotionStage_m1(stMotionStage:=M1);
fbMotionStage_m2(stMotionStage:=M2);
fbMotionStage_m3(stMotionStage:=M3);
fbMotionStage_m4(stMotionStage:=M4);
fbMotionStage_m5(stMotionStage:=M5);
fbMotionStage_m6(stMotionStage:=M6);

// Add Some Encoder Readback and Storage:
fbDataM1L0ActPos(bExecute:=bExecuteDataStorageM1L0,
           		 fInput:=M5.stAxisStatus.fActPosition,
           		 arrOutput=>aEncM1L0PitchActPos,
                 bNewArray=>bNewPitchEncArray);

fbDataM1L0SetPos(bExecute:=bExecuteDataStorageM1L0,
           		 fInput:=M5.Axis.NcToPlc.SetPos,
           		 arrOutput=>aEncM1L0PitchSetPos);

fbStatsM1L0(aSignal:=aEncM1L0PitchActPos,
	        bAlwaysCalc:=TRUE,
		    fMean=>fEncMeanM1L0,
		    fStDev=>fEncStDevM1L0);

// Calculate RMS Error:
If bNewPitchEncArray THEN
	fCurrM1L0PitchRMSError := 0;
	FOR nIndex := 1 TO 1000 DO
		fDiff := aEncM1L0PitchActPos[nIndex] - aEncM1L0PitchSetPos[nIndex];
		fSum := EXPT(fDiff, 2);
		fCurrM1L0PitchRMSError := fCurrM1L0PitchRMSError + fSum;
	END_FOR;
	fCurrM1L0PitchRMSError := fCurrM1L0PitchRMSError / 1000.0;
	fCurrM1L0PitchRMSError := SQRT(fCurrM1L0PitchRMSError);
	// Watch for max:
	IF fCurrM1L0PitchRMSError > fMaxM1L0PitchRMSError THEN
		fMaxM1L0PitchRMSError := fCurrM1L0PitchRMSError;
	END_IF
	// Watch for min:
	IF fCurrM1L0PitchRMSError < fMinM1L0PitchRMSError THEN
		fMinM1L0PitchRMSError := fCurrM1L0PitchRMSError;
	END_IF
END_IF

// Pitch Control
stM1L0PitchControl(Pitch:=M1L0_Pitch,
                   DirectPiezoMode:=(ExpertMode AND PitchManualMode),
                   q_xDone=>M1L0_Pitch.Axis.bDone,
                   q_xBusy=>M1L0_Pitch.Axis.bBusy);

(*
// M2L0
M2L0.fbRunHOMS(stYup:=M7,
               stYdwn:=M8,
               stXup:=M9,
               stXdwn:=M10,
               stPitch:=M11,
               stBender:=M12,
	           nYupEncRef:=GVL_M2L0.nYUP_ENC_REF,
               nYdwnEncRef:=GVL_M2L0.nYDWN_ENC_REF,
               nXupEncRef:=GVL_M2L0.nXUP_ENC_REF,
               nXdwnEncRef:=GVL_M2L0.nXDWN_ENC_REF,
			   bExecuteCoupleY:=M2L0.bExecuteCoupleY,
               bExecuteCoupleX:=M2L0.bExecuteCoupleX,
			   bExecuteDecoupleY:=M2L0.bExecuteDecoupleY,
               bExecuteDecoupleX:=M2L0.bExecuteDecoupleX,
               bGantryAlreadyCoupledY=>M2L0.bGantryAlreadyCoupledY,
               bGantryAlreadyCoupledX=>M2L0.bGantryAlreadyCoupledX,
               nCurrGantryY=>M2L0.nCurrGantryY,
               nCurrGantryX=>M2L0.nCurrGantryX);

// Convert nCurrGantry to um (smaller number) to read out in epics
M2L0.nCurrGantryY_um := LINT_TO_REAL(M2L0.nCurrGantryY) / 1000;
M2L0.nCurrGantryX_um := LINT_TO_REAL(M2L0.nCurrGantryX) / 1000;

fbMotionStage_m7(stMotionStage:=M7);
fbMotionStage_m8(stMotionStage:=M8);
fbMotionStage_m9(stMotionStage:=M9);
fbMotionStage_m10(stMotionStage:=M10);
fbMotionStage_m11(stMotionStage:=M11);
fbMotionStage_m12(stMotionStage:=M12);
*)]]></ST>
    </Implementation>
  </POU>
</TcPlcObject>